import requests
from bs4 import BeautifulSoup
import tkinter as tk
from tkinter import messagebox, simpledialog

class WebVulnerabilityScanner:
    def __init__(self, master):
        self.master = master
        self.master.title("Web Vulnerability Scanner")
        self.master.configure(bg="black")

        # GUI Elements
        self.label = tk.Label(master, text="Enter target URL:", bg="black", fg="lime", font=("Consolas", 12))
        self.label.pack(pady=10)

        self.url_entry = tk.Entry(master, width=50, bg="black", fg="lime", insertbackground="lime", font=("Consolas", 10))
        self.url_entry.pack(pady=5)

        self.scan_button = tk.Button(master, text="Start Scan", command=self.start_scan, bg="lime", fg="black", font=("Consolas", 10))
        self.scan_button.pack(pady=10)

        self.results_text = tk.Text(master, width=60, height=20, bg="black", fg="lime", font=("Consolas", 10))
        self.results_text.pack(pady=10)

        self.status_label = tk.Label(master, text="Status: Ready", bg="black", fg="lime", font=("Consolas", 12))
        self.status_label.pack(pady=10)

    def start_scan(self):
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("Error", "Please enter a valid URL.")
            return

        self.results_text.delete(1.0, tk.END)
        self.status_label.config(text="Scanning...")
        self.scan_url(url)

    def scan_url(self, url):
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')

            vulnerabilities = []

            # Check for forms
            forms = soup.find_all('form')
            if forms:
                vulnerabilities.append(f"Found {len(forms)} form(s). These may be vulnerable to SQL Injection or XSS.")

            # Check for script tags
            scripts = soup.find_all('script')
            if any('src' not in script.attrs for script in scripts):
                vulnerabilities.append("Inline script(s) detected. Potential XSS vulnerability.")

            # Check for headers
            if 'X-Content-Type-Options' not in response.headers:
                vulnerabilities.append("Missing X-Content-Type-Options header. May lead to MIME type sniffing.")
            if 'Content-Security-Policy' not in response.headers:
                vulnerabilities.append("Missing Content-Security-Policy header. May allow XSS attacks.")

            # Display results
            if vulnerabilities:
                self.results_text.insert(tk.END, "Vulnerabilities found:\n\n")
                for v in vulnerabilities:
                    self.results_text.insert(tk.END, f"- {v}\n")
                self.status_label.config(text="Scan complete: Vulnerabilities found", fg="red")
            else:
                self.results_text.insert(tk.END, "No common vulnerabilities found.")
                self.status_label.config(text="Scan complete: No vulnerabilities found", fg="lime")

        except requests.exceptions.RequestException as e:
            messagebox.showerror("Error", f"Failed to scan URL: {e}")
            self.status_label.config(text="Status: Error", fg="red")

if __name__ == "__main__":
    root = tk.Tk()
    app = WebVulnerabilityScanner(root)
    root.mainloop()
